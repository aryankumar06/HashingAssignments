# Question 2 Solution 

#C++ Soln

#include <iostream>
#include <unordered_set>
#include <vector>

int longestConsecutive(const std::vector<int>& nums) {
    std::unordered_set<int> numSet(nums.begin(), nums.end());
    int longest = 0;

    for (int num : nums) {
        if (!numSet.count(num - 1)) { // Start of a sequence
            int currentNum = num;
            int streak = 1;

            while (numSet.count(currentNum + 1)) {
                currentNum++;
                streak++;
            }
            longest = std::max(longest, streak);
        }
    }
    return longest;
}

int main() {
    std::vector<int> nums = {100, 4, 200, 1, 3, 2};
    std::cout << "Longest consecutive sequence length: " << longestConsecutive(nums) << std::endl;
    return 0;
}

#JAVA Soln

import java.util.HashSet;

public class LongestConsecutiveSequence {
    public static int longestConsecutive(int[] nums) {
        HashSet<Integer> numSet = new HashSet<>();
        for (int num : nums) {
            numSet.add(num);
        }

        int longest = 0;
        for (int num : nums) {
            if (!numSet.contains(num - 1)) { // Start of a sequence
                int currentNum = num;
                int streak = 1;

                while (numSet.contains(currentNum + 1)) {
                    currentNum++;
                    streak++;
                }
                longest = Math.max(longest, streak);
            }
        }
        return longest;
    }

    public static void main(String[] args) {
        int[] nums = {100, 4, 200, 1, 3, 2};
        System.out.println("Longest consecutive sequence length: " + longestConsecutive(nums));
    }
}

